초기 학습 세트 (정리본)
1. Vercel 구조

프론트엔드: 정적 페이지 배포 (HTML, CSS, JS, React/Next.js 가능).

백엔드: API Routes (Node.js 기반 서버리스 함수).

데이터 저장: Google Apps Script API → Google Sheets.

UI 데이터 흐름:

입력폼 → JS fetch → Vercel API → Google Apps Script → Google Sheets

입력값 일부는 localStorage에도 저장하여 결과 페이지 전달.

2. Google Sheets 연동

Google Apps Script(Web App) 엔드포인트 생성.

POST 방식으로 JSON 데이터를 전송하면 시트에 행 추가.

JSON → 시트 매핑 규칙을 Codex가 이해해야 함.

3. 저장할 인풋 값 (폼 기준)
(1) 기본 정보

name → 성함 (id="name")

phone → 연락처 (id="phone")

email → 이메일 (id="email", 옵션)

(2) 병원 정보

hospital-name → 병원 이름 (id="hospital-name")

specialty → 전문진료분야 (id="specialty")

(3) 위치 정보

address-base → 병원 주소 (기본, 우편번호 검색) (id="address-base")

address-detail → 상세 주소 (id="address-detail")

(4) 성별/연령

gender → 성별 (id="gender", 값: M/F)

age → 연령대 (id="age", 값: A~G = 10대 이하 ~ 70대 이상)

privacy-consent → 개인정보 동의 체크 (id="privacy-consent")

4. 데이터 파이프라인

사용자가 입력폼 작성 (tt.html).

JS에서 입력값 수집 후:

localStorage 저장 (결과 페이지 전달용).

fetch(POST) → Vercel API Route 호출.

Vercel API Route → Google Apps Script API 호출.

Google Apps Script → Google Sheet에 입력값 추가 저장.

rr.html (결과 페이지)에서 localStorage 값 + API 결과를 기반으로 화면 렌더링.